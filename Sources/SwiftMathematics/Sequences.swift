// Sequences.swift
// Copyright © 2023 Kaleb A. Ascevich
//
// This package is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// This package is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this package. If not, see https://www.gnu.org/licenses/.

// MARK: - Summations

prefix operator ∑

/// Returns the sum of the provided sequence's elements.
///
/// On US English keyboard layouts, the "`∑`" character can be entered using ⌥W.
///
/// - Parameter sequence: A sequence of numbers.
///
/// - Returns: The summed sequence.
@inlinable public prefix func ∑ <T: Sequence>(sequence: T) -> T.Element where T.Element: Numeric {
    sequence.reduce(.zero, +)
}

/// Returns the sum of a generated sequence's elements.
///
/// The sequence is generated by calling `bounds.function` with every integer
/// between `bounds.from` and `bounds.to`. 
///
/// On US English keyboard layouts, the "`∑`" character can be entered using ⌥W.
///
///     let f = { (x: Int) in x * x }
///     let sum = ∑(3, 6, f)
///     // sum == 86
///
/// - Precondition: `bounds.from <= bounds.to`.
///
/// - Parameter bounds: A tuple containing the start index, the end index, and 
///   the function generating the sequence.
///
/// - Returns: The sum of the generated sequence's elements.
public prefix func ∑ <T: BinaryInteger>(
    bounds: (from: T, to: T, function: (T) -> T)
) -> T where T.Stride: SignedInteger {
    precondition(bounds.from <= bounds.to, "start index of summation must be less than end index")
    
    let sequence = Array(bounds.from...bounds.to).map(bounds.function)
    return ∑sequence
}

// MARK: - Products

prefix operator ∏

/// Returns the product of the provided sequence's elements.
///
/// On US English keyboard layouts, the "`∏`" character can be entered using ⌥⇧P.
///
/// - Parameter sequence: A sequence of numbers.
///
/// - Returns: The product of the sequence's elements.
@inlinable public prefix func ∏ <T: Sequence>(sequence: T) -> T.Element where T.Element: Numeric {
    sequence.reduce(1, *)
}

/// Returns the product of a generated sequence's elements.
///
/// The sequence is generated by calling `bounds.function` with every integer 
/// between `bounds.from` and `bounds.to`.
///
/// On US English keyboard layouts, the "`∏`" character can be entered using ⌥⇧P.
///
///     let f = { (x: Int) in x + x }
///     let product = ∑(3, 6, f)
///     // product == 5760
///
/// - Precondition: `bounds.from <= bounds.to`.
///
/// - Parameter bounds: A tuple containing the start index, the end index, and 
///   the function generating the sequence.
///
/// - Returns: The product of the generated sequence's elements.
public prefix func ∏ <T: BinaryInteger>(
    bounds: (from: T, to: T, function: (T) -> T)
) -> T where T.Stride: SignedInteger {
    precondition(bounds.from <= bounds.to, "start index of Cartesian product must be less than end index")
    
    let sequence = Array(bounds.from...bounds.to).map(bounds.function)
    return ∏sequence
}
